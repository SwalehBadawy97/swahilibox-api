<<<<<<< HEAD
'use strict';
=======
"use strict";
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

var f = require('util').format,
  require_optional = require('require_optional');

// Set property function
var setProperty = function(obj, prop, flag, values) {
  Object.defineProperty(obj, prop.name, {
<<<<<<< HEAD
    enumerable: true,
    set: function(value) {
      if (typeof value !== 'boolean') throw new Error(f('%s required a boolean', prop.name));
      // Flip the bit to 1
      if (value === true) values.flags |= flag;
      // Flip the bit to 0 if it's set, otherwise ignore
      if (value === false && (values.flags & flag) === flag) values.flags ^= flag;
      prop.value = value;
    },
    get: function() {
      return prop.value;
    }
  });
};
=======
      enumerable:true,
      set: function(value) {
        if(typeof value != 'boolean') throw new Error(f("%s required a boolean", prop.name));
        // Flip the bit to 1
        if(value == true) values.flags |= flag;
        // Flip the bit to 0 if it's set, otherwise ignore
        if(value == false && (values.flags & flag) == flag) values.flags ^= flag;
        prop.value = value;
      }
    , get: function() { return prop.value; }
  });
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

// Set property function
var getProperty = function(obj, propName, fieldName, values, func) {
  Object.defineProperty(obj, propName, {
<<<<<<< HEAD
    enumerable: true,
    get: function() {
      // Not parsed yet, parse it
      if (values[fieldName] == null && obj.isParsed && !obj.isParsed()) {
=======
    enumerable:true,
    get: function() {
      // Not parsed yet, parse it
      if(values[fieldName] == null && obj.isParsed && !obj.isParsed()) {
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4
        obj.parse();
      }

      // Do we have a post processing function
<<<<<<< HEAD
      if (typeof func === 'function') return func(values[fieldName]);
=======
      if(typeof func == 'function') return func(values[fieldName]);
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4
      // Return raw value
      return values[fieldName];
    }
  });
<<<<<<< HEAD
};
=======
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

// Set simple property
var getSingleProperty = function(obj, name, value) {
  Object.defineProperty(obj, name, {
<<<<<<< HEAD
    enumerable: true,
    get: function() {
      return value;
    }
  });
};
=======
    enumerable:true,
    get: function() {
      return value
    }
  });
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

// Shallow copy
var copy = function(fObj, tObj) {
  tObj = tObj || {};
<<<<<<< HEAD
  for (var name in fObj) tObj[name] = fObj[name];
  return tObj;
};
=======
  for(var name in fObj) tObj[name] = fObj[name];
  return tObj;
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

var debugOptions = function(debugFields, options) {
  var finaloptions = {};
  debugFields.forEach(function(n) {
    finaloptions[n] = options[n];
  });

  return finaloptions;
<<<<<<< HEAD
};
=======
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

var retrieveBSON = function() {
  var BSON = require('bson');
  BSON.native = false;

  try {
<<<<<<< HEAD
    var optionalBSON = require_optional('bson-ext');
    if (optionalBSON) {
      optionalBSON.native = true;
      return optionalBSON;
    }
  } catch (err) {} // eslint-disable-line

  return BSON;
};

// Throw an error if an attempt to use Snappy is made when Snappy is not installed
var noSnappyWarning = function() {
  throw new Error(
    'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.'
  );
};

// Facilitate loading Snappy optionally
var retrieveSnappy = function() {
  var snappy = null;
  try {
    snappy = require_optional('snappy');
  } catch (error) {} // eslint-disable-line
  if (!snappy) {
    snappy = {
      compress: noSnappyWarning,
      uncompress: noSnappyWarning,
      compressSync: noSnappyWarning,
      uncompressSync: noSnappyWarning
    };
  }
  return snappy;
};
=======
    // try {
    //   BSON = require('bson-ext');
    //   BSON.native = true;
    // } catch(err) {
      var optionalBSON = require_optional('bson-ext');
      if(optionalBSON) {
        optionalBSON.native = true;
        return optionalBSON;
      }
    // }
  } catch(err) {}

  return BSON;
}
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4

exports.setProperty = setProperty;
exports.getProperty = getProperty;
exports.getSingleProperty = getSingleProperty;
exports.copy = copy;
exports.debugOptions = debugOptions;
exports.retrieveBSON = retrieveBSON;
<<<<<<< HEAD
exports.retrieveSnappy = retrieveSnappy;
=======
>>>>>>> 71339de0c80cefcb3f3de1403ae61821653d7ea4
